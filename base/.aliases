alias rpm-depends="rpm -qpR"

alias which=type
alias d.='df -h . |sed 1d'
alias s.='du -sh .'
alias ..="cd .."

alias reset-sound="pulseaudio -k && sudo alsa force-reload"

alias rsyncnogit="rsync -av --filter=':- .gitignore' --exclude .git"

alias g="git"
alias gcs="git clone --depth 1"

# Detect which `ls` flavor is in use
if ls --color > /dev/null 2>&1; then # GNU `ls`
    colorflag="--color"
else # OS X `ls`
    colorflag="-G"
fi

# List all files colorized in long format
alias l="ls -lF ${colorflag}"

# List all files colorized in long format, including dot files
alias la="ls -laF ${colorflag}"

# List only directories
alias lsd="ls -lF ${colorflag} | grep --color=never '^d'"

# Always use color output for `ls`
alias ls="command ls ${colorflag}"
export LS_COLORS='no=00:fi=00:di=01;34:ln=01;36:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.gz=01;31:*.bz2=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.avi=01;35:*.fli=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.ogg=01;35:*.mp3=01;35:*.wav=01;35:'

# Enable aliases to be sudoâ€™ed
#alias sudo='nocorrect sudo '

# Get week number
alias week='date +%V'

# URL-encode strings
alias urlencode='python -c "import sys, urllib as ul; print ul.quote_plus(sys.argv[1]);"'

# g -- call grep recursively with useful defaults
# 02oct2011  +chris+
# 10jan2012  +chris+  take an directory as possible last argument
# 28nov2012  +chris+  use grep -r
# 15dec2013  +chris+  use LC_ALL=C for speed and UTF-8 segfaults with -P
# 13may2015  +chris+  use directory only when more than two arguments
# 22feb2016  +chris+  line-buffered to quicker pipes
# 14aug2016  +chris+  same for git-grep
# 27sep2016  +chris+  '+ext' to expand to --include=*.ext
rgrep() {
  LC_ALL=C grep \
    ${${(M)@:#+*}:s/+/--include=*./} \
    --exclude "*~" --exclude "*.o" --exclude "tags" \
    --exclude-dir .bzr --exclude-dir .git --exclude-dir .hg --exclude-dir .svn \
    --exclude-dir CVS  --exclude-dir RCS --exclude-dir _darcs \
    --exclude-dir _build \
    --line-buffered -r -P ${${@:#+*}:?regexp missing}
}

# d -- use g to find a definition (start of line, Go, Ocaml, Ruby, Rust)
# 07apr2014  +chris+
# 13may2015  +chris+
# 21jan2017  +leah+  ignore binary
# 10feb2018  +leah+  fix #define, better output
# 15aug2019  +leah+  revert output
def() {
  rgrep -IHn '(^|(#define|\b(func|let|let rec|class|module|def|fn))\s+)'"$@"
}

# hl -- highlight regexps
# 06sep2012  +chris+
hl() { egrep --color=always -e '' -e${^*} }

# noq -- remove query string from filenames
# 01dec2012  +chris+
noq() { for f (${@:-*\?*}) mv -nv $f ${f%%\?*} }

# jkill -- kill all jobs of the current shell
# 23dec2012  +chris+
jkill() { kill "$@" %${(k)^jobstates} }

# k1 -- kill oldest job of the current shell
# 15dec2013  +chris+
k1() {
  local pids=${(j:,:)${jobstates#*:*:}%=*}
  kill "$@" ${(f)$(ps -o pid= --sort start -p $pids)[1]}
}

# jpid -- map job ids to pids
# 23dec2012  +chris+
jpid() {
  local p
  # $jobstates uses jobs.c:getjob() and can do %1 or %foo as well.
  for id; p+=(${${${jobstates[$id]}#*:*:}%=*})
  print $p
}

# bins -- list all executable files in $PATH as called by basename
bins() {
  rehash
  whence -p ${(kon)commands}
}

# total [-F<sep>] [FIELDNUM] - sum up numbers in a column
# 20jul2014  +chris+  zsh function
total() {
  local F
  expr "$1" : -F >/dev/null && F=$1 && shift
  awk $F -v f=${1:-1} '{s+=$f} END{print s}'
}

# fasd

alias a='fasd -a'        # any
alias s='fasd -si'       # show / search / select
alias d='fasd -d'        # directory
alias f='fasd -f'        # file
alias sd='fasd -sid'     # interactive directory selection
alias sf='fasd -sif'     # interactive file selection
alias v='f -t -e vim -b viminfo'
alias o='a -e xdg-open'

# os x specific

if [[ "$platform" == "Darwin" ]]; then
    alias o='a -e open'
    # JavaScriptCore REPL
    jscbin="/System/Library/Frameworks/JavaScriptCore.framework/Versions/A/Resources/jsc";
    [ -e "${jscbin}" ] && alias jsc="${jscbin}";
    unset jscbin;

    # Recursively delete `.DS_Store` files
    alias cleanup="find . -type f -name '*.DS_Store' -ls -delete"

    # Show/hide hidden files in Finder
    alias show="defaults write com.apple.finder AppleShowAllFiles -bool true && killall Finder"
    alias hide="defaults write com.apple.finder AppleShowAllFiles -bool false && killall Finder"
fi

# h -- grep history
# 08mar2011  +chris+
# 14mar2011  +chris+
# 08dec2011  +chris+
# 19mar2014  +chris+  work without argument
h() { fc -l 0 -1 | sed -n "/${1:-.}/s/^ */!/p" | tail -n ${2:-10} }
alias h=' h'

# hman - format manpage as monospace HTML
# 10feb2018  +leah+
hman() { man -T utf8 "$@" | ul | aha }

# twoman - show inline "manpage"
# 13feb2017  +leah+
twoman() {
  for cmd; do
    sed -n '1{/^[^#][^!]/q;d};0,/^$\|^[^#]/s/^# //p' ${commands[$cmd]?not found}
  done
}

# sslcat HOST:PORT - print SSL certificate and details
sslcat() {
  local cert="$(openssl s_client -connect $1 </dev/null | awk '/^--*BEGIN/,/^--*END/')"
  printf '%s\n' "$cert" | openssl x509 -in /dev/stdin -text
  printf '%s\n' "$cert" | openssl x509 -in /dev/stdin -noout -sha1 -fingerprint
  printf '%s\n' "$cert" | openssl x509 -in /dev/stdin -noout -md5 -fingerprint
}

# spot - show changes compared to previous line
# 03nov2017  +leah+
spot() {
  awk '{ for (i = 1; i <= length($0); i++)
           printf("%c", ((l = substr($0, i, 1))!=" " && l!="\t" &&
                          substr(p, i, 1)==l ? "." : l))
         printf("\n"); p = $0; }'
}

vterm_printf(){
    if [ -n "$TMUX" ] && ([ "${TERM%%-*}" = "tmux" ] || [ "${TERM%%-*}" = "screen" ] ); then
        # Tell tmux to pass the escape sequences through
        printf "\ePtmux;\e\e]%s\007\e\\" "$1"
    elif [ "${TERM%%-*}" = "screen" ]; then
        # GNU screen (screen, screen-256color, screen-256color-bce)
        printf "\eP\e]%s\007\e\\" "$1"
    else
        printf "\e]%s\e\\" "$1"
    fi
}

vterm_cmd() {
    local vterm_elisp
    vterm_elisp=""
    while [ $# -gt 0 ]; do
        vterm_elisp="$vterm_elisp""$(printf '"%s" ' "$(printf "%s" "$1" | sed -e 's|\\|\\\\|g' -e 's|"|\\"|g')")"
        shift
    done
    vterm_printf "51;E$vterm_elisp"
}

find_file() {
    vterm_cmd find-file "$(realpath "${@:-.}")"
}

say() {
    vterm_cmd message "%s" "$*"
}

find_file_below() {
    vterm_cmd find-file-below "$(realpath "${@:-.}")"
}

aws_profile() {
    . <(aws-vault exec ${1:-$USER} -- bash -c 'declare -p | grep AWS')
}

clear_aws() {
    . <(env | grep -oP 'AWS_[^=]+' | sed -e 's/^/unset /')
}

mount_docs() {
    mkdir -p ~/Documents/work-docs || :
    rclone mount peoplegis:PeopleGIS\ Documentation ~/Documents/work-docs \
    --daemon \
    --vfs-cache-mode full \
    --vfs-read-chunk-size-limit 512M \
    --no-modtime \
    --transfers 2  # default 4 parallel file xfers
}

alias vpnup='nmcli conn up vpn.mapsonline.net'
alias vpndown='nmcli conn down vpn.mapsonline.net'

start_aws_creds() {
    if ip addr show label lo:0; then
        sudo ip route del 169.254.0.0/16
        sudo ip addr del 169.254.169.254/24 dev lo label lo:0
    fi
    sudo pkill -f "aws-vault exec $USER -s"
    /home/cpearson/bin/aws-vault exec $USER -s &
}

interpolate() {
    perl -i -pe 's|\\n|\n|g;s|\\t|\t|g' "$*"
}